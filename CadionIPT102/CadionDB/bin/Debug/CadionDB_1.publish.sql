/*
Deployment script for CadionDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CadionDB"
:setvar DefaultFilePrefix "CadionDB"
:setvar DefaultDataPath "C:\Users\JERICHO\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\JERICHO\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Password] NVARCHAR (50) NOT NULL,
    [Username] NVARCHAR (50) NOT NULL,
    [Class]    NVARCHAR (50) NULL,
    [Id]       INT           IDENTITY (1, 1) NOT NULL,
    PRIMARY KEY CLUSTERED ([Username] ASC, [Password] ASC)
);


GO
PRINT N'Creating Table [dbo].[Vape]...';


GO
CREATE TABLE [dbo].[Vape] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (50) NULL,
    [Course/Year] NVARCHAR (50) NULL,
    [Title]       NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Procedure [dbo].[User_ADD]...';


GO
CREATE PROCEDURE [dbo].[User_ADD]
	@Password NVARCHAR(50) , 
    @Username NVARCHAR(50) , 
    @Class NVARCHAR(50)
AS
BEGIN
INSERT INTO [dbo].[User]
(
[Password],
[Username],
[Class]
)
VALUES
(
@Password,
@Username,
@Class
)

END
GO
PRINT N'Creating Procedure [dbo].[User_DEL]...';


GO
CREATE PROCEDURE [dbo].[User_DEL]
	@Id INT
AS
BEGIN
DELETE FROM [dbo].[User]
WHERE
[Id]=@Id
END
GO
PRINT N'Creating Procedure [dbo].[User_DIS]...';


GO
CREATE PROCEDURE [dbo].[User_DIS]
AS
BEGIN
if(select count(*)from[dbo].[User])=0
begin
INSERT INTO [dbo].[User]
(
[Password],
[Username],
[Class]
)
VALUES
(
N'Admin',
N'Admin',
N'Admin'
)

end
if(select count(*)from[dbo].[Vape])=0
begin
INSERT INTO [dbo].[Vape]
(
[Name],
[Course/Year],
[Title]
)
VALUES
(
N'VGOD',
N'BlackCurrant',
N'20mg'
)

end
SELECT
[Password] as Password,
[Username] as Username,
[Class] as  Class,
[Id] as Id
FROM [dbo].[User]

END
GO
PRINT N'Creating Procedure [dbo].[User_LOG]...';


GO
CREATE PROCEDURE [dbo].[User_LOG]
	   @Password NVARCHAR(50) , 
    @Username NVARCHAR(50) 
AS
BEGIN
SELECT
[Class] as  Class

FROM [dbo].[User]

WHERE
[Password] like @Password
and
[Username] like @Username

END
GO
PRINT N'Creating Procedure [dbo].[User_SEA]...';


GO
CREATE PROCEDURE [dbo].[User_SEA]
	    @Key NVARCHAR(50) 
AS
BEGIN
SELECT
[Password] as  Password,
[Username] as Username ,
[Class] as  Class
FROM [dbo].[User]
WHERE
[Password] like @Key
or
[Username] like @Key
or
[Class] like @Key
order by [Username]
END
GO
PRINT N'Creating Procedure [dbo].[User_UPD]...';


GO
CREATE PROCEDURE [dbo].[User_UPD]
	@Password NVARCHAR(50) , 
    @Username NVARCHAR(50) , 
    @Class NVARCHAR(50),
    	@Id INT

AS
BEGIN
UPDATE [dbo].[User]
SET
[Password] = COALESCE(@Password,[Password]),
[Username] = COALESCE(@Username,[Username]),
[Class] = COALESCE(@Class,[Class])

WHERE
[Id]=@Id

END
GO
PRINT N'Creating Procedure [dbo].[Vape_ADD]...';


GO
CREATE PROCEDURE [dbo].[Vape_ADD]
	@Name NVARCHAR(50), 
    @CourseYear NVARCHAR(50), 
    @Title NVARCHAR(50)
AS
BEGIN
INSERT INTO [dbo].[Vape]
(
[Name],
[Course/Year],
[Title]
)
VALUES
(
@Name,
@CourseYear,
@Title
)

END
GO
PRINT N'Creating Procedure [dbo].[Vape_DEL]...';


GO
CREATE PROCEDURE [dbo].[Vape_DEL]
	 @Id INT
AS
BEGIN
DELETE FROM [dbo].[Vape]
WHERE [Id]=@Id

END
GO
PRINT N'Creating Procedure [dbo].[Vape_DIS]...';


GO
CREATE PROCEDURE [dbo].[Vape_DIS]
		AS
BEGIN
SELECT
[Id] as Id,
[Name] as Name,
[Course/Year] as CourseYear,
[Title] as Title

FROM [dbo].[Vape]


END
GO
PRINT N'Creating Procedure [dbo].[Vape_Sea]...';


GO
CREATE PROCEDURE [dbo].[Vape_Sea]
	@key NVARCHAR(50)

AS
BEGIN
SELECT
[Id] as Id,
[Name] as Name,
[Course/Year] as CourseYear,
[Title] as Title

FROM [dbo].[Vape]

WHERE 
[Id] like @key or
[Name] like @key or
[Course/Year] like @key or
[Title] like @key 

ORDER BY [Name]
END
GO
PRINT N'Creating Procedure [dbo].[Vape_UPD]...';


GO
CREATE PROCEDURE [dbo].[Vape_UPD]
	    @Id INT,
    @Name NVARCHAR(50), 
    @CourseYear NVARCHAR(50), 
    @Title NVARCHAR(50)

AS

BEGIN
UPDATE [dbo].[Vape]
SET
[Name] =coalesce(@Name,[Name]) ,
[Course/Year] = coalesce(@CourseYear,[Course/Year]) ,
[Title] =coalesce(@Title,[Title]) 
WHERE [Id]=@Id

END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
